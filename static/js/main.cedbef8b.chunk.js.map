{"version":3,"sources":["app/account/reducers.js","app/store.js","data/firebase.js","components/Template/ScrollToTop.js","layouts/Main.js","app/account/selectors.js","App.js","serviceWorker.js","index.js"],"names":["initialState","signedIn","rootReducer","combineReducers","account","state","action","type","user","payload","displayName","email","persistConfig","key","storage","persistedReducer","persistReducer","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","persistor","persistStore","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","db","firestore","auth","provider","GoogleAuthProvider","collection","ScrollToTop","pathname","useLocation","useEffect","scrollTo","Main","props","titleTemplate","defaultTitle","defer","title","name","content","description","id","children","defaultProps","fullPage","selectAccountState","createSelector","getState","selectIsSignedIn","PUBLIC_URL","process","SignIn","lazy","SignUp","Index","TeacherRoutes","App","loginState","useSelector","basename","fallback","exact","path","component","to","Boolean","location","hostname","match","ReactDOM","render","StrictMode","loading","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cedbef8b.chunk.js","sourcesContent":["const initialState = {\r\n  signedIn: false,\r\n}\r\n  \r\n  // Use the initialState as a default value\r\n  export default function accountReducer(state = initialState, action) {\r\n    // The reducer normally looks at the action type field to decide what happens\r\n    switch (action.type) {\r\n      // Do something here based on the different types of actions\r\n      case \"SIGN_IN\":\r\n        return {\r\n          ...state,\r\n          signedIn: true,\r\n          user: action.payload,\r\n          displayName: action.payload.displayName,\r\n          email: action.payload.email,\r\n        }\r\n      \r\n      case \"SIGN_OUT\":\r\n        return {\r\n          ...state,\r\n          signedIn: false,\r\n          user: null,\r\n          displayName: null,\r\n          email: null,\r\n        }\r\n      default:\r\n        // If this reducer doesn't recognize the action type, or doesn't\r\n        // care about this specific action, return the existing state unchanged\r\n        return state\r\n    }\r\n  }","import { combineReducers, createStore } from '@reduxjs/toolkit';\r\nimport accountReducer from './account/reducers.js';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport persistReducer from 'redux-persist/es/persistReducer';\r\nimport persistStore from 'redux-persist/es/persistStore';\r\n\r\nconst rootReducer = combineReducers({\r\n  account: accountReducer\r\n})\r\n\r\nconst persistConfig = {\r\n  key: 'root',\r\n  storage,\r\n}\r\n\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\r\n\r\nexport const store = createStore(\r\n  persistedReducer,\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\nexport const persistor = persistStore(store);\r\n","// Import the functions you need from the SDKs you need\r\nimport firebase from \"firebase\";\r\nimport { collection, query, where, getDocs } from \"firebase/firestore\";\r\n\r\n// TODO: Add SDKs for Firebase products that you want to use\r\n// https://firebase.google.com/docs/web/setup#available-libraries\r\n\r\n// Your web app's Firebase configuration\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyBikWf9vy86sF9wXyRjkpdrrAJaw7WoQ8M\",\r\n  authDomain: \"ancient-path-adventures.firebaseapp.com\",\r\n  projectId: \"ancient-path-adventures\",\r\n  storageBucket: \"ancient-path-adventures.appspot.com\",\r\n  messagingSenderId: \"1051282870332\",\r\n  appId: \"1:1051282870332:web:8f7a5922db7d370e86b339\",\r\n  measurementId: \"G-NPPQJQTEQN\"\r\n};\r\n\r\n// Initialize Firebase\r\nconst app = firebase.initializeApp(firebaseConfig);\r\nconst db = firebase.firestore();\r\n\r\nvar auth = firebase.auth();\r\nvar provider = new firebase.auth.GoogleAuthProvider();\r\n\r\n\r\nexport const userDataDb = db.collection(\"userData\");\r\n\r\nexport {auth , provider};","import { useEffect } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\n// See https://reacttraining.com/react-router/web/guides/scroll-restoration/scroll-to-top\r\nconst ScrollToTop = () => {\r\n  const { pathname } = useLocation();\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, [pathname]);\r\n\r\n  return null;\r\n};\r\n\r\nexport default ScrollToTop;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Helmet, HelmetProvider } from 'react-helmet-async';\r\nimport ScrollToTop from '../components/Template/ScrollToTop';\r\n\r\nconst Main = (props) => (\r\n  <HelmetProvider>\r\n    <ScrollToTop />\r\n    <Helmet titleTemplate=\"%s | Ancient Path Adventures\" defaultTitle=\"Ancient Path Adventures\" defer={false}>\r\n      {props.title && <title>{props.title}</title>}\r\n      <meta name=\"description\" content={props.description} />\r\n    </Helmet>\r\n    <div id=\"wrapper\">\r\n      <div id=\"main\">\r\n        {props.children}\r\n      </div>\r\n    </div>\r\n  </HelmetProvider>\r\n);\r\n\r\nMain.propTypes = {\r\n  children: PropTypes.oneOfType([\r\n    PropTypes.arrayOf(PropTypes.node),\r\n    PropTypes.node,\r\n  ]),\r\n  fullPage: PropTypes.bool,\r\n  title: PropTypes.string,\r\n  description: PropTypes.string,\r\n};\r\n\r\nMain.defaultProps = {\r\n  children: null,\r\n  fullPage: false,\r\n  title: null,\r\n  description: \"Ancient Path Adventures\",\r\n};\r\n\r\nexport default Main;\r\n","import { createSelector } from \"reselect\";\r\nimport { store } from \"../store.js\"\r\nimport { auth } from \"../../data/firebase.js\";\r\n\r\nconst selectState = () => store.getState();\r\n\r\nconst selectAccountState = createSelector(\r\n    selectState,\r\n    state => state.account\r\n)\r\n\r\nexport const selectIsSignedIn = createSelector(\r\n    selectAccountState,\r\n    state => state.signedIn\r\n)\r\n\r\nexport const selectDisplayName = createSelector(\r\n    selectAccountState,\r\n    state => state.displayName\r\n)\r\n\r\nexport const selectEmail = createSelector(\r\n    selectAccountState,\r\n    state => state.email\r\n)\r\n\r\nexport const selectUser = createSelector(\r\n    selectAccountState,\r\n    state => state.user\r\n)","import React, { Suspense, lazy } from 'react';\r\nimport { BrowserRouter, Switch, Route, Redirect, matchPath } from 'react-router-dom';\r\nimport Main from './layouts/Main'; // fallback for lazy pages\r\nimport {useAuthState} from 'react-firebase-hooks/auth';\r\nimport {auth}  from './data/firebase';\r\nimport { selectIsSignedIn } from './app/account/selectors';\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst { PUBLIC_URL } = process.env;\r\n\r\n// Every route - we lazy load so that each page can be chunked\r\n// NOTE that some of these chunks are very small. We should optimize\r\n// which pages are lazy loaded in the future.\r\nconst SignIn = lazy(() => import('./pages/LogIn/SignIn'));\r\nconst SignUp = lazy(() => import('./pages/LogIn/SignUp'));\r\nconst Index = lazy(() => import('./pages/Index'));\r\nconst NotFound = lazy(() => import('./pages/NotFound'));\r\nconst TeacherRoutes = lazy(() => import('./routes/TeacherRoutes'));\r\n\r\nconst App = () => {\r\n  const loginState = useSelector(selectIsSignedIn);\r\n\r\n  return (\r\n  <BrowserRouter basename={PUBLIC_URL}>\r\n    <Suspense fallback={<Main />}>\r\n      <Switch>\r\n        <Route exact path=\"/home\" component={Index} />\r\n        {!loginState && <Route path=\"/signin\" component={SignIn} />}\r\n        {!loginState && <Route path=\"/signup\" component={SignUp} />}\r\n        {loginState && <Route path=\"/teacher\" component={TeacherRoutes} />}\r\n        <Redirect to=\"/home\" />\r\n      </Switch>\r\n      <Route exact path=\"/\">\r\n          <Redirect to=\"/home\" />\r\n      </Route>\r\n    </Suspense>\r\n  </BrowserRouter>\r\n  )\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { persistor, store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}