{"version":3,"sources":["data/constants.js","components/Template/Button.js","data/firebase.js","components/Template/SideBar.js","components/Template/ScrollToTop.js","layouts/Main.js","images/white mtn.png","app/account/actions.js","components/Authentication/SignInOutButton.js","components/Template/Navigation.js","App.js","app/account/reducers.js","app/store.js","serviceWorker.js","index.js"],"names":["Constants","LIGHT_GREEN","DARK_GREEN","GREEN","WHITE","HEADER_HEIGHT","StyledButton","styled","div","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","provider","GoogleAuthProvider","SideBar","ScrollToTop","pathname","useLocation","useEffect","window","scrollTo","Main","props","titleTemplate","defaultTitle","defer","title","name","content","description","id","children","defaultProps","fullPage","signIn","user","type","payload","signOut","StyledSignInButton","SignInOutButton","dispatch","useDispatch","loginState","useAuthState","onClick","location","href","then","StyledHeader","header","StyledButtonContainer","HeaderName","StyledLogo","img","StyledLogoContainer","StyledHelpButton","Navigation","src","Logo","PUBLIC_URL","process","SignIn","lazy","Index","Journal","Deliverables","App","basename","fallback","exact","path","component","to","initialState","signedIn","rootReducer","combineReducers","account","state","action","displayName","email","persistConfig","key","storage","persistedReducer","persistReducer","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","persistor","persistStore","Boolean","hostname","match","ReactDOM","render","StrictMode","loading","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.81436a8c.chunk.js","sourcesContent":["\nexport const Constants = {\n    LIGHT_GREEN: \"#A2E1D0\",\n    DARK_GREEN: \"#6BAE9B\",\n    GREEN: \"#7DCBB5\",\n    WHITE: \"#e9e9ff\",\n    HEADER_HEIGHT: \"80px\",\n}\n","import { Constants } from \"../../data/constants\";\nimport styled from 'styled-components';\n\nconst StyledButton = styled.div`\n    background-color: ${Constants.LIGHT_GREEN};\n    box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    text-align: center;\n    height: 40px;\n    padding: 20px;\n    color: white;\n    font-weight: bold;\n    &:hover {\n        filter: brightness(110%);\n        cursor: pointer;\n    }\n`\n  \nexport default StyledButton;","// Import the functions you need from the SDKs you need\nimport firebase from \"firebase\";\n\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBikWf9vy86sF9wXyRjkpdrrAJaw7WoQ8M\",\n  authDomain: \"ancient-path-adventures.firebaseapp.com\",\n  projectId: \"ancient-path-adventures\",\n  storageBucket: \"ancient-path-adventures.appspot.com\",\n  messagingSenderId: \"1051282870332\",\n  appId: \"1:1051282870332:web:8f7a5922db7d370e86b339\",\n  measurementId: \"G-NPPQJQTEQN\"\n};\n\n// Initialize Firebase\nconst app = firebase.initializeApp(firebaseConfig);\n\nvar auth = firebase.auth();\nvar provider = new firebase.auth.GoogleAuthProvider(); \nexport {auth , provider};","import React from 'react';\n\n\nconst SideBar = () => (\n  <section id=\"sidebar\">\n    <section id=\"intro\">\n      <header>\n        <h2>Ancient Path Adventures</h2>\n      </header>\n    </section>\n\n    <section className=\"blurb\">\n      <h2>Project Summary</h2>\n      <p>\n        ** Project Summary Goes Here **\n      </p>\n    </section>\n  </section>\n);\n\nexport default SideBar;\n","import { useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\n\n// See https://reacttraining.com/react-router/web/guides/scroll-restoration/scroll-to-top\nconst ScrollToTop = () => {\n  const { pathname } = useLocation();\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [pathname]);\n\n  return null;\n};\n\nexport default ScrollToTop;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Helmet, HelmetProvider } from 'react-helmet-async';\n\nimport Navigation from '../components/Template/Navigation';\nimport SideBar from '../components/Template/SideBar';\nimport ScrollToTop from '../components/Template/ScrollToTop';\n\nconst Main = (props) => (\n  <HelmetProvider>\n    <ScrollToTop />\n    <Helmet titleTemplate=\"%s | Ancient Path Adventures\" defaultTitle=\"Ancient Path Adventures\" defer={false}>\n      {props.title && <title>{props.title}</title>}\n      <meta name=\"description\" content={props.description} />\n    </Helmet>\n    <div id=\"wrapper\">\n      <div id=\"main\">\n        {props.children}\n      </div>\n    </div>\n  </HelmetProvider>\n);\n\nMain.propTypes = {\n  children: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.node),\n    PropTypes.node,\n  ]),\n  fullPage: PropTypes.bool,\n  title: PropTypes.string,\n  description: PropTypes.string,\n};\n\nMain.defaultProps = {\n  children: null,\n  fullPage: false,\n  title: null,\n  description: \"Ancient Path Adventures\",\n};\n\nexport default Main;\n","export default __webpack_public_path__ + \"static/media/white mtn.bb2904a1.png\";","export const signIn = (user) => {\n    return  {\n        type: 'SIGN_IN',\n        payload: user,\n    }\n}\n\nexport const signOut = () => {\n    return  {\n        type: 'SIGN_OUT',\n    }\n}","import React from 'react';\nimport {auth , provider}  from '../../data/firebase.js';\nimport {useAuthState} from 'react-firebase-hooks/auth';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { signIn, signOut } from '../../app/account/actions.js';\nimport StyledButton from '../Template/Button.js';\nimport { Constants } from '../../data/constants.js';\nimport styled from 'styled-components';\n  \nconst SignInOutButton = () => {\n    const dispatch = useDispatch();\n    const loginState = useAuthState(auth)[0];\n\n    const logout = () => {\n        auth.signOut().then(() => {\n            dispatch(signOut());\n        });\n    }\n      \n    return (\n        <div>\n            {!loginState && <StyledSignInButton onClick={() => window.location.href='/AncientPathAdventures/SignIn'}>SIGN-IN</StyledSignInButton>}\n            {loginState && <StyledSignInButton onClick={logout}>LOGOUT</StyledSignInButton>}\n        </div>\n    );\n}\n\nconst StyledSignInButton = styled(StyledButton)`\n  background-color: ${Constants.DARK_GREEN};\n  width: 120px;\n`\n  \nexport default SignInOutButton;","import React from 'react';\nimport styled from 'styled-components';\nimport { Constants } from '../../data/constants';\nimport StyledButton from './Button';\nimport Logo from '../../images/white mtn.png'\nimport SignInOutButton from '../Authentication/SignInOutButton'\n\n// Websites Navbar, displays routes defined in 'src/data/routes'\nconst Navigation = () => (\n  <StyledHeader id=\"header\">\n    <StyledLogoContainer>\n      <StyledLogo src={Logo} />\n      <HeaderName>Ancient Path Adventures</HeaderName>\n    </StyledLogoContainer>\n    <StyledButtonContainer>\n      <StyledHelpButton>HELP</StyledHelpButton>\n      <SignInOutButton />\n    </StyledButtonContainer>\n  </StyledHeader>\n);\n\nconst StyledHeader = styled.header`\n  display: flex;\n  background-color: ${Constants.LIGHT_GREEN};\n  justify-content: space-between;\n  align-items: center;\n\theight: ${Constants.HEADER_HEIGHT};\n\tleft: 0;\n\tposition: fixed;\n\ttop: 0;\n\twidth: 100%;\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);\n  z-index: 100000;\n`\n\nconst StyledButtonContainer = styled.div`\n  display: flex;\n  align-items: center;\n  margin-right: 3%;\n`\n\nconst HeaderName = styled.div`\n  font-family: Playball;\n  color: white;\n  white-space: nowrap;\n  margin-left: 30px;\n  font-size: 30px;\n  font-weight: bold;\n  text-shadow: 0px 2px 2px rgba(0, 0, 0, 0.25);\n  @media (max-width: 800px) {\n    display: none;\n}\n`\n\nconst StyledLogo = styled.img`\n  margin-left: 3%;\n  width: 130px;\n`\n\nconst StyledLogoContainer = styled.div`\n  display: flex;\n  align-items: center;\n  margin-left: 3%;\n`\n\nconst StyledHelpButton = styled(StyledButton)`\n  margin-right: 10px;\n  box-shadow: none;\n`\n\nconst StyledSignInButton = styled(StyledButton)`\n  background-color: ${Constants.DARK_GREEN};\n  width: 120px;\n`\n\nexport default Navigation;\n","import React, { Suspense, lazy } from 'react';\nimport { BrowserRouter, Switch, Route, Redirect, matchPath } from 'react-router-dom';\nimport Main from './layouts/Main'; // fallback for lazy pages\nimport {useAuthState} from 'react-firebase-hooks/auth';\nimport {auth}  from './data/firebase';\n\nconst { PUBLIC_URL } = process.env;\n\n// Every route - we lazy load so that each page can be chunked\n// NOTE that some of these chunks are very small. We should optimize\n// which pages are lazy loaded in the future.\nconst SignIn = lazy(() => import('./pages/SignIn'));\nconst Index = lazy(() => import('./pages/Index'));\nconst NotFound = lazy(() => import('./pages/NotFound'));\nconst Journal = lazy(() => import('./pages/Journal'));\nconst Deliverables = lazy(() => import('./pages/Deliverables'));\n\nconst App = () => {\n  const loginState = useAuthState(auth)[0];\n  return (\n  <BrowserRouter basename={PUBLIC_URL}>\n    <Suspense fallback={<Main />}>\n      <Switch>\n        <Route exact path=\"/home\" component={Index} />\n        <Route path=\"/SignIn\" component={SignIn} />\n        {loginState && <Route path=\"/journal\" component={Journal} />}\n        {loginState && <Route path=\"/deliverables\" component={Deliverables} />}\n        <Redirect to=\"/home\" />\n      </Switch>\n      <Route exact path=\"/\">\n          <Redirect to=\"/home\" />\n      </Route>\n    </Suspense>\n  </BrowserRouter>\n  )\n};\n\nexport default App;\n","const initialState = {\n  signedIn: false,\n}\n  \n  // Use the initialState as a default value\n  export default function accountReducer(state = initialState, action) {\n    // The reducer normally looks at the action type field to decide what happens\n    switch (action.type) {\n      // Do something here based on the different types of actions\n      case \"SIGN_IN\":\n        return {\n          ...state,\n          signedIn: true,\n          user: action.payload,\n          displayName: action.payload.displayName,\n          email: action.payload.email,\n        }\n      \n      case \"SIGN_OUT\":\n        return {\n          ...state,\n          signedIn: false,\n          user: null,\n          displayName: null,\n          email: null,\n        }\n      default:\n        // If this reducer doesn't recognize the action type, or doesn't\n        // care about this specific action, return the existing state unchanged\n        return state\n    }\n  }","import { combineReducers, createStore } from '@reduxjs/toolkit';\nimport accountReducer from './account/reducers.js';\nimport storage from 'redux-persist/lib/storage';\nimport persistReducer from 'redux-persist/es/persistReducer';\nimport persistStore from 'redux-persist/es/persistStore';\n\nconst rootReducer = combineReducers({\n  account: accountReducer\n})\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n}\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nexport const store = createStore(\n  persistedReducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\nexport const persistor = persistStore(store);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { persistor, store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}