{"version":3,"sources":["data/firebase.js","app/account/selectors.js","app/account/reducers.js","app/class/reducers.js","app/module/reducers.js","app/store.js","data/constants.js","app/class/actions.js","components/Template/ScrollToTop.js","layouts/Main.js","app/account/actions.js","app/class/selectors.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","db","firestore","auth","GoogleAuthProvider","userDataDb","Constants","IN_CYPRESS_TEST","collection","classDataDb","modulesDb","apaModulesDb","selectAccountState","createSelector","store","getState","state","account","selectIsSignedIn","signedIn","selectDisplayName","displayName","selectUser","email","selectAccountType","accountType","selectIsTeacher","type","selectIsStudent","selectIsAdmin","selectClassList","classList","selectModuleList","moduleList","selectUID","uid","initialState","currentClass","currentStep","inModule","selectedModule","undefined","allReducers","combineReducers","action","payload","user","passwordLength","class","modules","module","selectedStep","steps","map","step","id","title","description","clearState","persistConfig","key","storage","persistedReducer","persistReducer","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","persistor","persistStore","Cypress","COLOR","LIGHT_GREEN","DARK_GREEN","GREEN","WHITE","LIGHT_BLUE","DARK_BLUE","TEAL","GRAY","PINK","LIGHT_PINK","HEADER_HEIGHT","SIDEBAR_WIDTH","EMPTY_MODULE","public","creator","MOCK_MODULE","data","setCurrentClass","classNumber","ScrollToTop","pathname","useLocation","useEffect","scrollTo","Main","props","titleTemplate","defaultTitle","defer","name","content","children","defaultProps","fullPage","signIn","setPasswordLength","length","selectClassState","selectCurrentClass","PUBLIC_URL","process","SignIn","lazy","SignUp","Index","Profile","TeacherRoutes","StudentRoutes","AdminRoutes","App","dispatch","useDispatch","loginState","useSelector","isTeacher","isStudent","isAdmin","doc","get","then","cid","basename","fallback","exact","path","component","to","Boolean","location","hostname","match","ReactDOM","render","StrictMode","loading","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.38d070c0.chunk.js","sourcesContent":["// Import the functions you need from the SDKs you need\nimport firebase from \"firebase\";\nimport { Constants } from \"./constants\";\n\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBikWf9vy86sF9wXyRjkpdrrAJaw7WoQ8M\",\n  authDomain: \"ancient-path-adventures.firebaseapp.com\",\n  projectId: \"ancient-path-adventures\",\n  storageBucket: \"ancient-path-adventures.appspot.com\",\n  messagingSenderId: \"1051282870332\",\n  appId: \"1:1051282870332:web:8f7a5922db7d370e86b339\",\n  measurementId: \"G-NPPQJQTEQN\",\n};\n\n// Initialize Firebase\nconst app = firebase.initializeApp(firebaseConfig);\nconst db = firebase.firestore();\n\nvar auth = firebase.auth();\nvar provider = new firebase.auth.GoogleAuthProvider();\n\nexport const userDataDb = Constants.IN_CYPRESS_TEST\n  ? db.collection(\"testUserData\")\n  : db.collection(\"userData\");\nexport const classDataDb = Constants.IN_CYPRESS_TEST\n  ? db.collection(\"testClassData\")\n  : db.collection(\"classData\");\nexport const modulesDb = Constants.IN_CYPRESS_TEST\n  ? db.collection(\"testModules\")\n  : db.collection(\"modules\");\nexport const realModulesDb = db.collection(\"modules\");\nexport const realClassDb = db.collection(\"classData\");\nexport const realUserDataDb = db.collection(\"userData\");\nexport const apaModulesDb = db.collection(\"apaModules\");\n\nexport { auth, provider, app };\n","import { createSelector } from \"reselect\";\nimport { store } from \"../store.js\";\n\nconst selectState = () => store.getState();\n\nconst selectAccountState = createSelector(\n  selectState,\n  (state) => state.account\n);\n\nexport const selectIsSignedIn = createSelector(\n  selectAccountState,\n  (state) => state.signedIn\n);\n\nexport const selectDisplayName = createSelector(\n  selectAccountState,\n  (state) => state.displayName\n);\n\nexport const selectEmail = createSelector(\n  selectAccountState,\n  (state) => state.email\n);\n\nexport const selectUser = createSelector(selectAccountState, (state) => state);\n\nexport const selectAccountType = createSelector(\n  selectAccountState,\n  (state) => state.accountType\n);\n\nexport const selectIsTeacher = createSelector(\n  selectAccountType,\n  (type) => type === \"teacher\"\n);\n\nexport const selectIsStudent = createSelector(\n  selectAccountType,\n  (type) => type === \"student\"\n);\n\nexport const selectIsAdmin = createSelector(\n  selectAccountType,\n  (type) => type === \"admin\"\n);\n\nexport const selectClassList = createSelector(\n  selectAccountState,\n  (state) => state.classList\n);\n\nexport const selectModuleList = createSelector(\n  selectAccountState,\n  (state) => state.moduleList\n);\n\nexport const selectUID = createSelector(\n  selectAccountState,\n  (state) => state.uid\n);\n","const initialState = {\n  signedIn: false,\n};\n\n// Use the initialState as a default value\nexport default function accountReducer(state = initialState, action) {\n  // The reducer normally looks at the action type field to decide what happens\n  switch (action.type) {\n    // Do something here based on the different types of actions\n    case \"SIGN_IN\":\n      return {\n        ...state,\n        ...action.payload,\n        signedIn: true,\n        user: action.payload,\n      };\n\n    case \"SIGN_OUT\":\n      return {\n        initialState,\n      };\n\n    case \"UPDATE_CLASS_LIST\":\n      return {\n        ...state,\n        classList: action.payload,\n      };\n\n    case \"SET_PASSWORD_LENGTH\":\n      return {\n        ...state,\n        passwordLength: action.payload,\n      };\n\n    case \"CLEAR_STATE\":\n      return {\n        initialState,\n      };\n\n    default:\n      // If this reducer doesn't recognize the action type, or doesn't\n      // care about this specific action, return the existing state unchanged\n      return state;\n  }\n}\n","const initialState = {\n  currentClass: null,\n};\n\n// Use the initialState as a default value\nexport default function classReducer(state = initialState, action) {\n  // The reducer normally looks at the action type field to decide what happens\n  switch (action.type) {\n    // Do something here based on the different types of actions\n    case \"SET_CURRENT_CLASS\":\n      return {\n        ...state,\n        currentClass: action.payload,\n      };\n\n    case \"ADD_MODULE\":\n      return {\n        ...state,\n        currentClass: {\n          ...state.currentClass,\n          modules: [...state.currentClass.modules, action.payload],\n        },\n      };\n\n    case \"CLEAR_STATE\":\n      return {\n        initialState,\n      };\n\n    default:\n      // If this reducer doesn't recognize the action type, or doesn't\n      // care about this specific action, return the existing state unchanged\n      return state;\n  }\n}\n","const initialState = {\n  currentStep: -1,\n  inModule: false,\n  selectedModule: undefined,\n};\n\n// Use the initialState as a default value\nexport default function moduleReducer(state = initialState, action) {\n  // The reducer normally looks at the action type field to decide what happens\n  switch (action.type) {\n    // Do something here based on the different types of actions\n    case \"SET_CURRENT_STEP\":\n      return {\n        ...state,\n        currentStep: action.payload,\n      };\n\n    case \"SET_SELECTED_MODULE\":\n      return {\n        ...state,\n        selectedModule: action.payload,\n      };\n\n    case \"SET_SELECTED_STEP\":\n      return {\n        ...state,\n        selectedStep: action.payload,\n      };\n\n    case \"ADD_STEP\":\n      return {\n        ...state,\n        selectedModule: {\n          ...state.selectedModule,\n          steps: [...state.selectedModule.steps, action.payload],\n        },\n      };\n\n    case \"UPDATE_STEP\":\n      return {\n        ...state,\n        selectedModule: {\n          ...state.selectedModule,\n          steps: state.selectedModule.steps.map((step) => {\n            if (step.id === action.payload.id) {\n              return action.payload;\n            } else {\n              return step;\n            }\n          }),\n        },\n      };\n\n    case \"SET_STEPS\":\n      return {\n        ...state,\n        selectedModule: {\n          ...state.selectedModule,\n          steps: action.payload,\n        },\n      };\n\n    case \"SET_TITLE\":\n      return {\n        ...state,\n        selectedModule: {\n          ...state.selectedModule,\n          title: action.payload,\n        },\n      };\n\n    case \"SET_DESCRIPTION\":\n      return {\n        ...state,\n        selectedModule: {\n          ...state.selectedModule,\n          description: action.payload,\n        },\n      };\n\n    default:\n      // If this reducer doesn't recognize the action type, or doesn't\n      // care about this specific action, return the existing state unchanged\n      return state;\n  }\n}\n","import { combineReducers, createStore } from \"@reduxjs/toolkit\";\nimport accountReducer from \"./account/reducers.js\";\nimport classReducer from \"./class/reducers.js\";\nimport storage from \"redux-persist/lib/storage\";\nimport persistReducer from \"redux-persist/es/persistReducer\";\nimport persistStore from \"redux-persist/es/persistStore\";\nimport moduleReducer from \"./module/reducers.js\";\n\nconst allReducers = combineReducers({\n  account: accountReducer,\n  class: classReducer,\n  module: moduleReducer,\n});\n\nconst rootReducer = (state, action) => {\n  if (action.type === \"CLEAR_STATE\") {\n    state = undefined;\n  }\n\n  return allReducers(state, action);\n};\n\nexport const clearState = () => {\n  return {\n    type: \"CLEAR_STATE\",\n  };\n};\n\nconst persistConfig = {\n  key: \"root\",\n  storage,\n};\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nexport const store = createStore(\n  persistedReducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\nexport const persistor = persistStore(store);\n","export const Constants = {\n  IN_CYPRESS_TEST: window.Cypress !== undefined,\n  COLOR: {\n    LIGHT_GREEN: \"#A2E1D0\",\n    DARK_GREEN: \"#6BAE9B\",\n    GREEN: \"#7DCBB5\",\n    WHITE: \"#e9e9ff\",\n    LIGHT_BLUE: \"#92d4f4\",\n    DARK_BLUE: \"#373B53\",\n    TEAL: \"#B5FFEA\",\n    GRAY: \"#E5E5E5\",\n    PINK: \"#eb34c0\",\n    LIGHT_PINK: \"#e663c6\",\n  },\n  HEADER_HEIGHT: \"80px\",\n  SIDEBAR_WIDTH: \"80px\",\n  EMPTY_MODULE: {\n    title: \"\",\n    description: \"\",\n    public: true,\n    creator: undefined,\n    steps: [],\n  },\n  MOCK_MODULE: {\n    title: \"Mock Module\",\n    description: \"This module is used for testing and development\",\n    public: true,\n    creator: \"someteacherIDhere\",\n    steps: [\n      {\n        type: \"text\",\n        data: {\n          // Some kind of text data here (title, description, etc.)\n        },\n      },\n      {\n        type: \"video\",\n        data: {\n          // Some kind of reference to a video stored somewhere in Firebase and maybe a video title\n        },\n      },\n      {\n        type: \"quiz\",\n        data: {\n          // Some kind of quiz data here (array of questions, title, etc.)\n        },\n      },\n    ],\n  },\n};\n","import { classDataDb } from \"../../data/firebase\";\n\nexport const setCurrentClass = (classNumber) => {\n  return {\n    type: \"SET_CURRENT_CLASS\",\n    payload: classNumber,\n  };\n};\n\nexport const addModule = (module) => {\n  return {\n    type: \"ADD_MODULE\",\n    payload: module,\n  };\n};\n\nexport const refreshClassData = (currentClass) => {\n  classDataDb\n    .doc(currentClass?.cid)\n    .get()\n    .then((doc) => setCurrentClass(doc.data()));\n};\n","import { useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\n\n// See https://reacttraining.com/react-router/web/guides/scroll-restoration/scroll-to-top\nconst ScrollToTop = () => {\n  const { pathname } = useLocation();\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [pathname]);\n\n  return null;\n};\n\nexport default ScrollToTop;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Helmet, HelmetProvider } from \"react-helmet-async\";\nimport ScrollToTop from \"../components/Template/ScrollToTop\";\n\nconst Main = (props) => (\n  <HelmetProvider>\n    <ScrollToTop />\n    <Helmet\n      titleTemplate=\"%s | Ancient Path Adventures\"\n      defaultTitle=\"Ancient Path Adventures\"\n      defer={false}\n    >\n      {props.title && <title>{props.title}</title>}\n      <meta name=\"description\" content={props.description} />\n    </Helmet>\n    <div id=\"wrapper\">\n      <div id=\"main\">{props.children}</div>\n    </div>\n  </HelmetProvider>\n);\n\nMain.propTypes = {\n  children: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.node),\n    PropTypes.node,\n  ]),\n  fullPage: PropTypes.bool,\n  title: PropTypes.string,\n  description: PropTypes.string,\n};\n\nMain.defaultProps = {\n  children: null,\n  fullPage: false,\n  title: null,\n  description: \"Ancient Path Adventures\",\n};\n\nexport default Main;\n","import { useDispatch } from \"react-redux\";\nimport { auth, userDataDb } from \"../../data/firebase\";\n\nexport const signIn = (user) => {\n  return {\n    type: \"SIGN_IN\",\n    payload: user,\n  };\n};\n\nexport const signOut = () => {\n  return {\n    type: \"SIGN_OUT\",\n  };\n};\n\nexport const setPasswordLength = (length) => {\n  return {\n    type: \"SET_PASSWORD_LENGTH\",\n    payload: length,\n  };\n};\n\nexport const updateClassList = (classList) => {\n  return {\n    type: \"UPDATE_CLASS_LIST\",\n    payload: classList,\n  };\n};\n\nexport const refreshAccountData = () => {\n  const dispatch = useDispatch();\n\n  userDataDb\n    .doc(auth.currentUser.uid)\n    .get()\n    .then((doc) => dispatch(signIn(doc.data())));\n};\n","import { createSelector } from \"reselect\";\nimport { store } from \"../store.js\";\n\nconst selectState = () => store.getState();\n\nconst selectClassState = createSelector(selectState, (state) => state.class);\n\nexport const selectCurrentClass = createSelector(\n  selectClassState,\n  (state) => state.currentClass\n);\n","import React, { Suspense, lazy, useEffect } from \"react\";\nimport { BrowserRouter, Switch, Route, Redirect } from \"react-router-dom\";\nimport Main from \"./layouts/Main\"; // fallback for lazy pages\nimport {\n  selectIsSignedIn,\n  selectIsTeacher,\n  selectIsStudent,\n  selectUID,\n  selectClassList,\n  selectIsAdmin,\n} from \"./app/account/selectors\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { auth, classDataDb, userDataDb } from \"./data/firebase\";\nimport { signIn } from \"./app/account/actions\";\nimport { selectCurrentClass } from \"./app/class/selectors\";\nimport { setCurrentClass } from \"./app/class/actions\";\n\nconst { PUBLIC_URL } = process.env;\n\n// Every route - we lazy load so that each page can be chunked\n// NOTE that some of these chunks are very small. We should optimize\n// which pages are lazy loaded in the future.\nconst SignIn = lazy(() => import(\"./pages/LogIn/SignIn\"));\nconst SignUp = lazy(() => import(\"./pages/LogIn/SignUp\"));\nconst Index = lazy(() => import(\"./pages/Index\"));\nconst Profile = lazy(() => import(\"./pages/Profile\"));\nconst TeacherRoutes = lazy(() => import(\"./routes/TeacherRoutes\"));\nconst StudentRoutes = lazy(() => import(\"./routes/StudentRoutes\"));\nconst AdminRoutes = lazy(() => import(\"./routes/AdminRoutes\"));\n\nconst App = () => {\n  const dispatch = useDispatch();\n  const loginState = useSelector(selectIsSignedIn);\n  const uid = useSelector(selectUID);\n  const isTeacher = useSelector(selectIsTeacher);\n  const isStudent = useSelector(selectIsStudent);\n  const isAdmin = useSelector(selectIsAdmin);\n  const currentClass = useSelector(selectCurrentClass);\n  const classList = useSelector(selectClassList);\n\n  useEffect(() => {\n    if (loginState) {\n      userDataDb\n        .doc(uid)\n        .get()\n        .then((data) => dispatch(signIn(data.data())));\n    }\n    if (loginState && !currentClass) {\n      if (classList[0]) {\n        dispatch(setCurrentClass(classList[0]));\n      }\n    } else if (loginState) {\n      classDataDb\n        .doc(currentClass?.cid)\n        .get()\n        .then((doc) => dispatch(setCurrentClass(doc.data())));\n    }\n  }, []);\n\n  return (\n    <BrowserRouter basename={PUBLIC_URL}>\n      <Suspense fallback={<Main />}>\n        <Switch>\n          <Route exact path=\"/home\" component={Index} />\n          {!loginState && <Route path=\"/signin\" component={SignIn} />}\n          {!loginState && <Route path=\"/signup\" component={SignUp} />}\n          {loginState && <Route path=\"/profile\" component={Profile} />}\n          {isTeacher && <Route path=\"/teacher\" component={TeacherRoutes} />}\n          {isStudent && <Route path=\"/student\" component={StudentRoutes} />}\n          {isAdmin && <Route path=\"/admin\" component={AdminRoutes} />}\n          {isTeacher && <Redirect to=\"/teacher\" />}\n          {isStudent && <Redirect to=\"/student\" />}\n          {isAdmin && <Redirect to=\"/admin\" />}\n          <Redirect to=\"/home\" />\n        </Switch>\n        <Route exact path=\"/\">\n          <Redirect to=\"/home\" />\n        </Route>\n      </Suspense>\n    </BrowserRouter>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { persistor, store } from \"./app/store\";\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { PersistGate } from \"redux-persist/integration/react\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}