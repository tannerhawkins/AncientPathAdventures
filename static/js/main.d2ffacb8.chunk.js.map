{"version":3,"sources":["app/account/reducers.js","app/class/reducers.js","app/module/reducers.js","app/store.js","app/account/selectors.js","components/Template/ScrollToTop.js","layouts/Main.js","app/module/selectors.js","App.js","serviceWorker.js","index.js"],"names":["initialState","signedIn","currentClass","currentStep","inModule","selectedModule","undefined","allReducers","combineReducers","account","state","action","type","payload","user","classList","class","modules","module","steps","clearState","persistConfig","key","storage","persistedReducer","persistReducer","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","persistor","persistStore","selectAccountState","createSelector","getState","selectIsSignedIn","selectDisplayName","displayName","selectAccountType","email","accountType","selectIsTeacher","selectIsStudent","selectClassList","selectModuleList","moduleList","uid","ScrollToTop","pathname","useLocation","useEffect","scrollTo","Main","props","titleTemplate","defaultTitle","defer","title","name","content","description","id","children","defaultProps","fullPage","selectModuleState","selectIsInModule","selectCurrentStep","selectSelectedModule","selectSteps","selectNextID","length","Math","max","map","step","selectCurrentStepData","data","PUBLIC_URL","process","SignIn","lazy","SignUp","Index","TeacherRoutes","StudentRoutes","App","loginState","useSelector","isTeacher","isStudent","basename","fallback","exact","path","component","to","Boolean","location","hostname","match","ReactDOM","render","StrictMode","loading","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d2ffacb8.chunk.js","sourcesContent":["const initialState = {\n  signedIn: false,\n};\n\n// Use the initialState as a default value\nexport default function accountReducer(state = initialState, action) {\n  // The reducer normally looks at the action type field to decide what happens\n  switch (action.type) {\n    // Do something here based on the different types of actions\n    case \"SIGN_IN\":\n      return {\n        ...state,\n        ...action.payload,\n        signedIn: true,\n        user: action.payload,\n      };\n\n    case \"SIGN_OUT\":\n      return {\n        initialState,\n      };\n\n    case \"UPDATE_CLASS_LIST\":\n      return {\n        ...state,\n        classList: action.payload,\n      };\n\n    case \"CLEAR_STATE\":\n      return {\n        initialState,\n      };\n\n    default:\n      // If this reducer doesn't recognize the action type, or doesn't\n      // care about this specific action, return the existing state unchanged\n      return state;\n  }\n}\n","const initialState = {\n  currentClass: null,\n};\n\n// Use the initialState as a default value\nexport default function classReducer(state = initialState, action) {\n  // The reducer normally looks at the action type field to decide what happens\n  switch (action.type) {\n    // Do something here based on the different types of actions\n    case \"SET_CURRENT_CLASS\":\n      return {\n        ...state,\n        currentClass: action.payload,\n      };\n\n    case \"ADD_MODULE\":\n      return {\n        ...state,\n        currentClass: {\n          ...state.currentClass,\n          modules: [...state.currentClass.modules, action.payload],\n        },\n      };\n\n    case \"CLEAR_STATE\":\n      return {\n        initialState,\n      };\n\n    default:\n      // If this reducer doesn't recognize the action type, or doesn't\n      // care about this specific action, return the existing state unchanged\n      return state;\n  }\n}\n","const initialState = {\n  currentStep: -1,\n  inModule: false,\n  selectedModule: undefined,\n};\n\n// Use the initialState as a default value\nexport default function moduleReducer(state = initialState, action) {\n  // The reducer normally looks at the action type field to decide what happens\n  switch (action.type) {\n    // Do something here based on the different types of actions\n    case \"SET_CURRENT_STEP\":\n      return {\n        ...state,\n        currentStep: action.payload,\n      };\n\n    case \"SET_SELECTED_MODULE\":\n      return {\n        ...state,\n        selectedModule: action.payload,\n      };\n\n    case \"ADD_STEP\":\n      return {\n        ...state,\n        selectedModule: {\n          ...state.selectedModule,\n          steps: [...state.selectedModule.steps, action.payload],\n        },\n      };\n\n    case \"SET_STEPS\":\n      return {\n        ...state,\n        selectedModule: {\n          ...state.selectedModule,\n          steps: action.payload,\n        },\n      };\n\n    default:\n      // If this reducer doesn't recognize the action type, or doesn't\n      // care about this specific action, return the existing state unchanged\n      return state;\n  }\n}\n","import { combineReducers, createStore } from \"@reduxjs/toolkit\";\nimport accountReducer from \"./account/reducers.js\";\nimport classReducer from \"./class/reducers.js\";\nimport storage from \"redux-persist/lib/storage\";\nimport persistReducer from \"redux-persist/es/persistReducer\";\nimport persistStore from \"redux-persist/es/persistStore\";\nimport moduleReducer from \"./module/reducers.js\";\n\nconst allReducers = combineReducers({\n  account: accountReducer,\n  class: classReducer,\n  module: moduleReducer,\n});\n\nconst rootReducer = (state, action) => {\n  if (action.type === \"CLEAR_STATE\") {\n    state = undefined;\n  }\n\n  return allReducers(state, action);\n};\n\nexport const clearState = () => {\n  return {\n    type: \"CLEAR_STATE\",\n  };\n};\n\nconst persistConfig = {\n  key: \"root\",\n  storage,\n};\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nexport const store = createStore(\n  persistedReducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\nexport const persistor = persistStore(store);\n","import { createSelector } from \"reselect\";\nimport { store } from \"../store.js\";\n\nconst selectState = () => store.getState();\n\nconst selectAccountState = createSelector(\n  selectState,\n  (state) => state.account\n);\n\nexport const selectIsSignedIn = createSelector(\n  selectAccountState,\n  (state) => state.signedIn\n);\n\nexport const selectDisplayName = createSelector(\n  selectAccountState,\n  (state) => state.displayName\n);\n\nexport const selectEmail = createSelector(\n  selectAccountState,\n  (state) => state.email\n);\n\nexport const selectUser = createSelector(\n  selectAccountState,\n  (state) => state.user\n);\n\nexport const selectAccountType = createSelector(\n  selectAccountState,\n  (state) => state.accountType\n);\n\nexport const selectIsTeacher = createSelector(\n  selectAccountType,\n  (type) => type === \"teacher\"\n);\n\nexport const selectIsStudent = createSelector(\n  selectAccountType,\n  (type) => type === \"student\"\n);\n\nexport const selectClassList = createSelector(\n  selectAccountState,\n  (state) => state.classList\n);\n\nexport const selectModuleList = createSelector(\n  selectAccountState,\n  (state) => state.moduleList\n);\n\nexport const selectUID = createSelector(\n  selectAccountState,\n  (state) => state.uid\n);\n","import { useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\n\n// See https://reacttraining.com/react-router/web/guides/scroll-restoration/scroll-to-top\nconst ScrollToTop = () => {\n  const { pathname } = useLocation();\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [pathname]);\n\n  return null;\n};\n\nexport default ScrollToTop;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Helmet, HelmetProvider } from \"react-helmet-async\";\nimport ScrollToTop from \"../components/Template/ScrollToTop\";\n\nconst Main = (props) => (\n  <HelmetProvider>\n    <ScrollToTop />\n    <Helmet\n      titleTemplate=\"%s | Ancient Path Adventures\"\n      defaultTitle=\"Ancient Path Adventures\"\n      defer={false}\n    >\n      {props.title && <title>{props.title}</title>}\n      <meta name=\"description\" content={props.description} />\n    </Helmet>\n    <div id=\"wrapper\">\n      <div id=\"main\">{props.children}</div>\n    </div>\n  </HelmetProvider>\n);\n\nMain.propTypes = {\n  children: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.node),\n    PropTypes.node,\n  ]),\n  fullPage: PropTypes.bool,\n  title: PropTypes.string,\n  description: PropTypes.string,\n};\n\nMain.defaultProps = {\n  children: null,\n  fullPage: false,\n  title: null,\n  description: \"Ancient Path Adventures\",\n};\n\nexport default Main;\n","import { createSelector } from \"reselect\";\r\nimport { store } from \"../store.js\";\r\n\r\nconst selectState = () => store.getState();\r\n\r\nconst selectModuleState = createSelector(selectState, (state) => state.module);\r\n\r\nexport const selectIsInModule = createSelector(\r\n  selectModuleState,\r\n  (state) => state.inModule\r\n);\r\n\r\nexport const selectCurrentStep = createSelector(\r\n  selectModuleState,\r\n  (state) => state.currentStep\r\n);\r\n\r\nexport const selectSelectedModule = createSelector(\r\n  selectModuleState,\r\n  (state) => state.selectedModule\r\n);\r\n\r\nexport const selectSteps = createSelector(\r\n  selectSelectedModule,\r\n  (module) => module?.steps\r\n);\r\n\r\nexport const selectNextID = createSelector(selectSteps, (steps) => {\r\n  if (steps.length === 0) {\r\n    return 0;\r\n  } else {\r\n    return Math.max(...steps.map((step) => step.id)) + 1;\r\n  }\r\n});\r\n\r\nexport const selectCurrentStepData = createSelector(\r\n  selectCurrentStep,\r\n  selectSteps,\r\n  (currentStep, steps) => steps[currentStep].data\r\n);\r\n","import React, { Suspense, lazy } from \"react\";\nimport {\n  BrowserRouter,\n  Switch,\n  Route,\n  Redirect,\n  matchPath,\n} from \"react-router-dom\";\nimport Main from \"./layouts/Main\"; // fallback for lazy pages\nimport {\n  selectIsSignedIn,\n  selectIsTeacher,\n  selectIsStudent,\n} from \"./app/account/selectors\";\nimport { useSelector } from \"react-redux\";\nimport { selectIsInModule } from \"./app/module/selectors\";\n\nconst { PUBLIC_URL } = process.env;\n\n// Every route - we lazy load so that each page can be chunked\n// NOTE that some of these chunks are very small. We should optimize\n// which pages are lazy loaded in the future.\nconst SignIn = lazy(() => import(\"./pages/LogIn/SignIn\"));\nconst SignUp = lazy(() => import(\"./pages/LogIn/SignUp\"));\nconst Index = lazy(() => import(\"./pages/Index\"));\nconst TeacherRoutes = lazy(() => import(\"./routes/TeacherRoutes\"));\nconst StudentRoutes = lazy(() => import(\"./routes/StudentRoutes\"));\n\nconst App = () => {\n  const loginState = useSelector(selectIsSignedIn);\n  const isTeacher = useSelector(selectIsTeacher);\n  const isStudent = useSelector(selectIsStudent);\n\n  return (\n    <BrowserRouter basename={PUBLIC_URL}>\n      <Suspense fallback={<Main />}>\n        <Switch>\n          <Route exact path=\"/home\" component={Index} />\n          {!loginState && <Route path=\"/signin\" component={SignIn} />}\n          {!loginState && <Route path=\"/signup\" component={SignUp} />}\n          {isTeacher && <Route path=\"/teacher\" component={TeacherRoutes} />}\n          {isStudent && <Route path=\"/student\" component={StudentRoutes} />}\n          {isTeacher && <Redirect to=\"/teacher\" />}\n          {isTeacher && <Redirect to=\"/student\" />}\n          <Redirect to=\"/home\" />\n        </Switch>\n        <Route exact path=\"/\">\n          <Redirect to=\"/home\" />\n        </Route>\n      </Suspense>\n    </BrowserRouter>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { persistor, store } from \"./app/store\";\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { PersistGate } from \"redux-persist/integration/react\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}